Teaching computer programming has long been known to be a complex process.
Software Visualization (SV) is the use of graphical and textual formalisms to describe the execution of computer programs.
The approach of using SV over a network as an educational tool raises futher issues as to how SV can be most appropriately included within a computer programming curriculum.
Some SV designers have claimed their product applies equally well from novice through to expert.
Recent SV evaluation studies suggest important differences in the way novices and experts are able use SVs.
Our students are studying part time and are required to fit their studies around other commitments, which means they will tend to study at different times.
Though many claims have been made by SV designers for the educational suitability of their product, little has been said as to the stage in the learning process when particular visualizations are most appropriate.
There is a wealth of evidence to suggest that the kind of knowledge structures and strategies used by expert and novice computer programmers differ qualitatively rather than quantitatively, and this affects how they are able to use different kinds of SV.
Students therefore require systems which are easy to use, low cost, multiplatform, and accessible from anywhere in the world.
The exercise asks students to write a sorting program, called qsort, which uses the quick sort algorithm.
SV is a method by which students and the tutor can communicate their understanding of a program, as well as solitary working.
The field of Machine Learning is becoming more popular.
Aritificial Intelligence and Machine Learning should be democratized.
